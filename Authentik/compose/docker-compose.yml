services:
  postgresql:
    image: docker.io/library/postgres:17-alpine
    container_name: postgres_authentik
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ./postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${PG_DB}
    networks:
      - nat
########################################################        
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    container_name: redis_authentik
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./redis:/data
    networks:
      - nat
#########################################################    
  server:
    image: ghcr.io/goauthentik/server:2025.2.1
    restart: unless-stopped
    container_name: authentik_server
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    ports:
      - 9000:9000 #http
      - 9443:9443 #https      
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nat  
#    labels: # (optional only for using traefik) ------>
#      - "traefik.enable=true"
#      - "traefik.http.routers.authentik.entrypoints=websecure"
#      - "traefik.http.routers.authentik.rule=Host(`authentik.example.com`)" # Replace with your desired hostname
#      - "traefik.http.routers.authentik.tls=true"
#      - "traefik.http.routers.authentik.tls.certresolver=cloudflare" # Replace with your cert resolver name
#      - "traefik.http.services.authentik.loadbalancer.server.port=9000"  # or 9443 for https    
#      - "traefik.docker.network=nat" 
#      - "traefik.http.routers.authentik.service=authentik"  
#      - "com.centurylinklabs.watchtower.enable=true"  # (optional if using watchtower for updates)
#      - "traefik.http.routers.authentik.middlewares=authentik@file" # (optional if using authentik or basic auth to protect your site)
#########################################################    
  worker:
    image: ghcr.io/goauthentik/server:2025.2.1
    restart: unless-stopped
    command: worker
    container_name: authentik_worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    user: root
    volumes:
      - ./var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nat 
########################################################            
networks:
  nat:
    external: true
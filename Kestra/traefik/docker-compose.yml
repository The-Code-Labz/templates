----
services:
  postgres:
    image: postgres:17.4
    container_name: postgres_kestra
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10
    restart: always
    networks:
      - nat2
###########################################################################################
  kestra:
    image: kestra/kestra:v0.21.5
    user: "root"
    command: server standalone
    volumes:
      - ./kestra-data:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/kestra
            driverClassName: org.postgresql.Driver
            username: ${POSTGRES_USER}
            password: ${POSTGRES_PASSWORD}
        kestra:
          server:
            basicAuth:
              enabled: true  # if you want to enable basic auth (disable for reverse proxy)
              username: "admin@kestra.io" # it must be a valid email address
              password: ${password}
          repository:
            type: postgres
          storage:
            type: local
            local:
              basePath: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmpDir:
              path: /tmp/kestra-wd/tmp
          url: http://localhost:8080/
#    ports:
#      - "8080:8080"
#      - "8081:8081"
    depends_on:
      postgres:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 5s
      retries: 3    
    networks:
      - nat
      - nat2
    restart: always
    labels: # (optional only for using traefik) ------>
      - "traefik.enable=true"
      - "traefik.http.routers.kestra.entrypoints=websecure"
      - "traefik.http.routers.kestra.rule=Host(`kestra.example.com`)" # Replace with your desired hostname
      - "traefik.http.routers.kestra.tls=true"
      - "traefik.http.routers.kestra.tls.certresolver=cloudflare" # Replace with your cert resolver name
      - "traefik.http.services.kestra.loadbalancer.server.port=8080"
      - "traefik.docker.network=nat"
      - "traefik.http.routers.kestra.service=kestra"
#      - "com.centurylinklabs.watchtower.enable=true"  # (optional if using watchtower for updates)
#      - "traefik.http.routers.kestra.middlewares=authentik@file" # (optional if using authentik or basic auth to protect your site)
###########################################################################################
networks:
  nat: 
    external: true   
  nat2: 
    external: true   